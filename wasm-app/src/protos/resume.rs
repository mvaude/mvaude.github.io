// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `resume.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Resume {
    // message fields
    pub name: ::std::string::String,
    pub email: ::std::string::String,
    pub source_code: ::std::string::String,
    pub host_link: ::std::string::String,
    pub phone_number: ::protobuf::SingularPtrField<PhoneNumber>,
    pub location: ::protobuf::SingularPtrField<Location>,
    pub linkedin_profile: ::std::string::String,
    pub github_profile: ::std::string::String,
    pub about_me: ::protobuf::RepeatedField<AboutMe>,
    pub education: ::protobuf::RepeatedField<Education>,
    pub experience: ::protobuf::RepeatedField<Experience>,
    pub skills: ::protobuf::RepeatedField<SkillCategory>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resume {
    fn default() -> &'a Resume {
        <Resume as ::protobuf::Message>::default_instance()
    }
}

impl Resume {
    pub fn new() -> Resume {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string email = 2;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // string source_code = 3;


    pub fn get_source_code(&self) -> &str {
        &self.source_code
    }
    pub fn clear_source_code(&mut self) {
        self.source_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_code(&mut self, v: ::std::string::String) {
        self.source_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_code(&mut self) -> &mut ::std::string::String {
        &mut self.source_code
    }

    // Take field
    pub fn take_source_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_code, ::std::string::String::new())
    }

    // string host_link = 4;


    pub fn get_host_link(&self) -> &str {
        &self.host_link
    }
    pub fn clear_host_link(&mut self) {
        self.host_link.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_link(&mut self, v: ::std::string::String) {
        self.host_link = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_link(&mut self) -> &mut ::std::string::String {
        &mut self.host_link
    }

    // Take field
    pub fn take_host_link(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host_link, ::std::string::String::new())
    }

    // .PhoneNumber phone_number = 5;


    pub fn get_phone_number(&self) -> &PhoneNumber {
        self.phone_number.as_ref().unwrap_or_else(|| <PhoneNumber as ::protobuf::Message>::default_instance())
    }
    pub fn clear_phone_number(&mut self) {
        self.phone_number.clear();
    }

    pub fn has_phone_number(&self) -> bool {
        self.phone_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phone_number(&mut self, v: PhoneNumber) {
        self.phone_number = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phone_number(&mut self) -> &mut PhoneNumber {
        if self.phone_number.is_none() {
            self.phone_number.set_default();
        }
        self.phone_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_phone_number(&mut self) -> PhoneNumber {
        self.phone_number.take().unwrap_or_else(|| PhoneNumber::new())
    }

    // .Location location = 6;


    pub fn get_location(&self) -> &Location {
        self.location.as_ref().unwrap_or_else(|| <Location as ::protobuf::Message>::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> Location {
        self.location.take().unwrap_or_else(|| Location::new())
    }

    // string linkedin_profile = 7;


    pub fn get_linkedin_profile(&self) -> &str {
        &self.linkedin_profile
    }
    pub fn clear_linkedin_profile(&mut self) {
        self.linkedin_profile.clear();
    }

    // Param is passed by value, moved
    pub fn set_linkedin_profile(&mut self, v: ::std::string::String) {
        self.linkedin_profile = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_linkedin_profile(&mut self) -> &mut ::std::string::String {
        &mut self.linkedin_profile
    }

    // Take field
    pub fn take_linkedin_profile(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.linkedin_profile, ::std::string::String::new())
    }

    // string github_profile = 8;


    pub fn get_github_profile(&self) -> &str {
        &self.github_profile
    }
    pub fn clear_github_profile(&mut self) {
        self.github_profile.clear();
    }

    // Param is passed by value, moved
    pub fn set_github_profile(&mut self, v: ::std::string::String) {
        self.github_profile = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_github_profile(&mut self) -> &mut ::std::string::String {
        &mut self.github_profile
    }

    // Take field
    pub fn take_github_profile(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.github_profile, ::std::string::String::new())
    }

    // repeated .AboutMe about_me = 9;


    pub fn get_about_me(&self) -> &[AboutMe] {
        &self.about_me
    }
    pub fn clear_about_me(&mut self) {
        self.about_me.clear();
    }

    // Param is passed by value, moved
    pub fn set_about_me(&mut self, v: ::protobuf::RepeatedField<AboutMe>) {
        self.about_me = v;
    }

    // Mutable pointer to the field.
    pub fn mut_about_me(&mut self) -> &mut ::protobuf::RepeatedField<AboutMe> {
        &mut self.about_me
    }

    // Take field
    pub fn take_about_me(&mut self) -> ::protobuf::RepeatedField<AboutMe> {
        ::std::mem::replace(&mut self.about_me, ::protobuf::RepeatedField::new())
    }

    // repeated .Education education = 10;


    pub fn get_education(&self) -> &[Education] {
        &self.education
    }
    pub fn clear_education(&mut self) {
        self.education.clear();
    }

    // Param is passed by value, moved
    pub fn set_education(&mut self, v: ::protobuf::RepeatedField<Education>) {
        self.education = v;
    }

    // Mutable pointer to the field.
    pub fn mut_education(&mut self) -> &mut ::protobuf::RepeatedField<Education> {
        &mut self.education
    }

    // Take field
    pub fn take_education(&mut self) -> ::protobuf::RepeatedField<Education> {
        ::std::mem::replace(&mut self.education, ::protobuf::RepeatedField::new())
    }

    // repeated .Experience experience = 11;


    pub fn get_experience(&self) -> &[Experience] {
        &self.experience
    }
    pub fn clear_experience(&mut self) {
        self.experience.clear();
    }

    // Param is passed by value, moved
    pub fn set_experience(&mut self, v: ::protobuf::RepeatedField<Experience>) {
        self.experience = v;
    }

    // Mutable pointer to the field.
    pub fn mut_experience(&mut self) -> &mut ::protobuf::RepeatedField<Experience> {
        &mut self.experience
    }

    // Take field
    pub fn take_experience(&mut self) -> ::protobuf::RepeatedField<Experience> {
        ::std::mem::replace(&mut self.experience, ::protobuf::RepeatedField::new())
    }

    // repeated .SkillCategory skills = 12;


    pub fn get_skills(&self) -> &[SkillCategory] {
        &self.skills
    }
    pub fn clear_skills(&mut self) {
        self.skills.clear();
    }

    // Param is passed by value, moved
    pub fn set_skills(&mut self, v: ::protobuf::RepeatedField<SkillCategory>) {
        self.skills = v;
    }

    // Mutable pointer to the field.
    pub fn mut_skills(&mut self) -> &mut ::protobuf::RepeatedField<SkillCategory> {
        &mut self.skills
    }

    // Take field
    pub fn take_skills(&mut self) -> ::protobuf::RepeatedField<SkillCategory> {
        ::std::mem::replace(&mut self.skills, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Resume {
    fn is_initialized(&self) -> bool {
        for v in &self.phone_number {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.about_me {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.education {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.experience {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.skills {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host_link)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.phone_number)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.linkedin_profile)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.github_profile)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.about_me)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.education)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.experience)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.skills)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.email);
        }
        if !self.source_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source_code);
        }
        if !self.host_link.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.host_link);
        }
        if let Some(ref v) = self.phone_number.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.linkedin_profile.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.linkedin_profile);
        }
        if !self.github_profile.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.github_profile);
        }
        for value in &self.about_me {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.education {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.experience {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.skills {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.email.is_empty() {
            os.write_string(2, &self.email)?;
        }
        if !self.source_code.is_empty() {
            os.write_string(3, &self.source_code)?;
        }
        if !self.host_link.is_empty() {
            os.write_string(4, &self.host_link)?;
        }
        if let Some(ref v) = self.phone_number.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.linkedin_profile.is_empty() {
            os.write_string(7, &self.linkedin_profile)?;
        }
        if !self.github_profile.is_empty() {
            os.write_string(8, &self.github_profile)?;
        }
        for v in &self.about_me {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.education {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.experience {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.skills {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resume {
        Resume::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Resume| { &m.name },
                |m: &mut Resume| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &Resume| { &m.email },
                |m: &mut Resume| { &mut m.email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source_code",
                |m: &Resume| { &m.source_code },
                |m: &mut Resume| { &mut m.source_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_link",
                |m: &Resume| { &m.host_link },
                |m: &mut Resume| { &mut m.host_link },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PhoneNumber>>(
                "phone_number",
                |m: &Resume| { &m.phone_number },
                |m: &mut Resume| { &mut m.phone_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Location>>(
                "location",
                |m: &Resume| { &m.location },
                |m: &mut Resume| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "linkedin_profile",
                |m: &Resume| { &m.linkedin_profile },
                |m: &mut Resume| { &mut m.linkedin_profile },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "github_profile",
                |m: &Resume| { &m.github_profile },
                |m: &mut Resume| { &mut m.github_profile },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AboutMe>>(
                "about_me",
                |m: &Resume| { &m.about_me },
                |m: &mut Resume| { &mut m.about_me },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Education>>(
                "education",
                |m: &Resume| { &m.education },
                |m: &mut Resume| { &mut m.education },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Experience>>(
                "experience",
                |m: &Resume| { &m.experience },
                |m: &mut Resume| { &mut m.experience },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SkillCategory>>(
                "skills",
                |m: &Resume| { &m.skills },
                |m: &mut Resume| { &mut m.skills },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Resume>(
                "Resume",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Resume {
        static instance: ::protobuf::rt::LazyV2<Resume> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Resume::new)
    }
}

impl ::protobuf::Clear for Resume {
    fn clear(&mut self) {
        self.name.clear();
        self.email.clear();
        self.source_code.clear();
        self.host_link.clear();
        self.phone_number.clear();
        self.location.clear();
        self.linkedin_profile.clear();
        self.github_profile.clear();
        self.about_me.clear();
        self.education.clear();
        self.experience.clear();
        self.skills.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resume {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resume {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AboutMe {
    // message fields
    pub description: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AboutMe {
    fn default() -> &'a AboutMe {
        <AboutMe as ::protobuf::Message>::default_instance()
    }
}

impl AboutMe {
    pub fn new() -> AboutMe {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AboutMe {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AboutMe {
        AboutMe::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &AboutMe| { &m.description },
                |m: &mut AboutMe| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AboutMe>(
                "AboutMe",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AboutMe {
        static instance: ::protobuf::rt::LazyV2<AboutMe> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AboutMe::new)
    }
}

impl ::protobuf::Clear for AboutMe {
    fn clear(&mut self) {
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AboutMe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AboutMe {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct PhoneNumber {
    // message fields
    pub country_code: u32,
    pub number: u64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PhoneNumber {
    fn default() -> &'a PhoneNumber {
        <PhoneNumber as ::protobuf::Message>::default_instance()
    }
}

impl PhoneNumber {
    pub fn new() -> PhoneNumber {
        ::std::default::Default::default()
    }

    // uint32 country_code = 1;


    pub fn get_country_code(&self) -> u32 {
        self.country_code
    }
    pub fn clear_country_code(&mut self) {
        self.country_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: u32) {
        self.country_code = v;
    }

    // uint64 number = 2;


    pub fn get_number(&self) -> u64 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = v;
    }
}

impl ::protobuf::Message for PhoneNumber {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.country_code = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.country_code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.country_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.country_code != 0 {
            os.write_uint32(1, self.country_code)?;
        }
        if self.number != 0 {
            os.write_uint64(2, self.number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PhoneNumber {
        PhoneNumber::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "country_code",
                |m: &PhoneNumber| { &m.country_code },
                |m: &mut PhoneNumber| { &mut m.country_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "number",
                |m: &PhoneNumber| { &m.number },
                |m: &mut PhoneNumber| { &mut m.number },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PhoneNumber>(
                "PhoneNumber",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PhoneNumber {
        static instance: ::protobuf::rt::LazyV2<PhoneNumber> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PhoneNumber::new)
    }
}

impl ::protobuf::Clear for PhoneNumber {
    fn clear(&mut self) {
        self.country_code = 0;
        self.number = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PhoneNumber {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PhoneNumber {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Location {
    // message fields
    pub city: ::std::string::String,
    pub state: ::std::string::String,
    pub country: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Location {
    fn default() -> &'a Location {
        <Location as ::protobuf::Message>::default_instance()
    }
}

impl Location {
    pub fn new() -> Location {
        ::std::default::Default::default()
    }

    // string city = 1;


    pub fn get_city(&self) -> &str {
        &self.city
    }
    pub fn clear_city(&mut self) {
        self.city.clear();
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        &mut self.city
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.city, ::std::string::String::new())
    }

    // string state = 2;


    pub fn get_state(&self) -> &str {
        &self.state
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        &mut self.state
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.state, ::std::string::String::new())
    }

    // string country = 3;


    pub fn get_country(&self) -> &str {
        &self.country
    }
    pub fn clear_country(&mut self) {
        self.country.clear();
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        &mut self.country
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.country, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Location {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.city)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.state)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.country)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.city.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.city);
        }
        if !self.state.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.state);
        }
        if !self.country.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.country);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.city.is_empty() {
            os.write_string(1, &self.city)?;
        }
        if !self.state.is_empty() {
            os.write_string(2, &self.state)?;
        }
        if !self.country.is_empty() {
            os.write_string(3, &self.country)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Location {
        Location::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "city",
                |m: &Location| { &m.city },
                |m: &mut Location| { &mut m.city },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state",
                |m: &Location| { &m.state },
                |m: &mut Location| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country",
                |m: &Location| { &m.country },
                |m: &mut Location| { &mut m.country },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Location>(
                "Location",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Location {
        static instance: ::protobuf::rt::LazyV2<Location> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Location::new)
    }
}

impl ::protobuf::Clear for Location {
    fn clear(&mut self) {
        self.city.clear();
        self.state.clear();
        self.country.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Location {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Location {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DateRange {
    // message fields
    pub start: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DateRange {
    fn default() -> &'a DateRange {
        <DateRange as ::protobuf::Message>::default_instance()
    }
}

impl DateRange {
    pub fn new() -> DateRange {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp start = 1;


    pub fn get_start(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start(&mut self) {
        self.start.clear();
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start.is_none() {
            self.start.set_default();
        }
        self.start.as_mut().unwrap()
    }

    // Take field
    pub fn take_start(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end = 2;


    pub fn get_end(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end(&mut self) {
        self.end.clear();
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end.is_none() {
            self.end.set_default();
        }
        self.end.as_mut().unwrap()
    }

    // Take field
    pub fn take_end(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for DateRange {
    fn is_initialized(&self) -> bool {
        for v in &self.start {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.start.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DateRange {
        DateRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start",
                |m: &DateRange| { &m.start },
                |m: &mut DateRange| { &mut m.start },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end",
                |m: &DateRange| { &m.end },
                |m: &mut DateRange| { &mut m.end },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DateRange>(
                "DateRange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DateRange {
        static instance: ::protobuf::rt::LazyV2<DateRange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DateRange::new)
    }
}

impl ::protobuf::Clear for DateRange {
    fn clear(&mut self) {
        self.start.clear();
        self.end.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DateRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DateRange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Education {
    // message fields
    pub institution: ::std::string::String,
    pub major: ::std::string::String,
    pub description: ::std::string::String,
    pub period: ::protobuf::SingularPtrField<DateRange>,
    pub degree: Education_Degree,
    pub location: ::protobuf::SingularPtrField<Location>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Education {
    fn default() -> &'a Education {
        <Education as ::protobuf::Message>::default_instance()
    }
}

impl Education {
    pub fn new() -> Education {
        ::std::default::Default::default()
    }

    // string institution = 1;


    pub fn get_institution(&self) -> &str {
        &self.institution
    }
    pub fn clear_institution(&mut self) {
        self.institution.clear();
    }

    // Param is passed by value, moved
    pub fn set_institution(&mut self, v: ::std::string::String) {
        self.institution = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_institution(&mut self) -> &mut ::std::string::String {
        &mut self.institution
    }

    // Take field
    pub fn take_institution(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.institution, ::std::string::String::new())
    }

    // string major = 2;


    pub fn get_major(&self) -> &str {
        &self.major
    }
    pub fn clear_major(&mut self) {
        self.major.clear();
    }

    // Param is passed by value, moved
    pub fn set_major(&mut self, v: ::std::string::String) {
        self.major = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_major(&mut self) -> &mut ::std::string::String {
        &mut self.major
    }

    // Take field
    pub fn take_major(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.major, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .DateRange period = 4;


    pub fn get_period(&self) -> &DateRange {
        self.period.as_ref().unwrap_or_else(|| <DateRange as ::protobuf::Message>::default_instance())
    }
    pub fn clear_period(&mut self) {
        self.period.clear();
    }

    pub fn has_period(&self) -> bool {
        self.period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_period(&mut self, v: DateRange) {
        self.period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_period(&mut self) -> &mut DateRange {
        if self.period.is_none() {
            self.period.set_default();
        }
        self.period.as_mut().unwrap()
    }

    // Take field
    pub fn take_period(&mut self) -> DateRange {
        self.period.take().unwrap_or_else(|| DateRange::new())
    }

    // .Education.Degree degree = 5;


    pub fn get_degree(&self) -> Education_Degree {
        self.degree
    }
    pub fn clear_degree(&mut self) {
        self.degree = Education_Degree::Baccalaureat;
    }

    // Param is passed by value, moved
    pub fn set_degree(&mut self, v: Education_Degree) {
        self.degree = v;
    }

    // .Location location = 6;


    pub fn get_location(&self) -> &Location {
        self.location.as_ref().unwrap_or_else(|| <Location as ::protobuf::Message>::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> Location {
        self.location.take().unwrap_or_else(|| Location::new())
    }
}

impl ::protobuf::Message for Education {
    fn is_initialized(&self) -> bool {
        for v in &self.period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.institution)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.major)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.period)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.degree, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.institution.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.institution);
        }
        if !self.major.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.major);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if let Some(ref v) = self.period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.degree != Education_Degree::Baccalaureat {
            my_size += ::protobuf::rt::enum_size(5, self.degree);
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.institution.is_empty() {
            os.write_string(1, &self.institution)?;
        }
        if !self.major.is_empty() {
            os.write_string(2, &self.major)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if let Some(ref v) = self.period.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.degree != Education_Degree::Baccalaureat {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.degree))?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Education {
        Education::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "institution",
                |m: &Education| { &m.institution },
                |m: &mut Education| { &mut m.institution },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "major",
                |m: &Education| { &m.major },
                |m: &mut Education| { &mut m.major },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Education| { &m.description },
                |m: &mut Education| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DateRange>>(
                "period",
                |m: &Education| { &m.period },
                |m: &mut Education| { &mut m.period },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Education_Degree>>(
                "degree",
                |m: &Education| { &m.degree },
                |m: &mut Education| { &mut m.degree },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Location>>(
                "location",
                |m: &Education| { &m.location },
                |m: &mut Education| { &mut m.location },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Education>(
                "Education",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Education {
        static instance: ::protobuf::rt::LazyV2<Education> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Education::new)
    }
}

impl ::protobuf::Clear for Education {
    fn clear(&mut self) {
        self.institution.clear();
        self.major.clear();
        self.description.clear();
        self.period.clear();
        self.degree = Education_Degree::Baccalaureat;
        self.location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Education {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Education {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Education_Degree {
    Baccalaureat = 0,
    BACHELORS = 1,
    MASTERS = 2,
    MOOC = 3,
}

impl ::protobuf::ProtobufEnum for Education_Degree {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Education_Degree> {
        match value {
            0 => ::std::option::Option::Some(Education_Degree::Baccalaureat),
            1 => ::std::option::Option::Some(Education_Degree::BACHELORS),
            2 => ::std::option::Option::Some(Education_Degree::MASTERS),
            3 => ::std::option::Option::Some(Education_Degree::MOOC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Education_Degree] = &[
            Education_Degree::Baccalaureat,
            Education_Degree::BACHELORS,
            Education_Degree::MASTERS,
            Education_Degree::MOOC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Education_Degree>("Education.Degree", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Education_Degree {
}

impl ::std::default::Default for Education_Degree {
    fn default() -> Self {
        Education_Degree::Baccalaureat
    }
}

impl ::protobuf::reflect::ProtobufValue for Education_Degree {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Experience {
    // message fields
    pub title: ::std::string::String,
    pub organization: ::std::string::String,
    pub website: ::std::string::String,
    pub period: ::protobuf::SingularPtrField<DateRange>,
    pub location: ::protobuf::SingularPtrField<Location>,
    pub duty: ::protobuf::RepeatedField<Duty>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Experience {
    fn default() -> &'a Experience {
        <Experience as ::protobuf::Message>::default_instance()
    }
}

impl Experience {
    pub fn new() -> Experience {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string organization = 2;


    pub fn get_organization(&self) -> &str {
        &self.organization
    }
    pub fn clear_organization(&mut self) {
        self.organization.clear();
    }

    // Param is passed by value, moved
    pub fn set_organization(&mut self, v: ::std::string::String) {
        self.organization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization(&mut self) -> &mut ::std::string::String {
        &mut self.organization
    }

    // Take field
    pub fn take_organization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.organization, ::std::string::String::new())
    }

    // string website = 3;


    pub fn get_website(&self) -> &str {
        &self.website
    }
    pub fn clear_website(&mut self) {
        self.website.clear();
    }

    // Param is passed by value, moved
    pub fn set_website(&mut self, v: ::std::string::String) {
        self.website = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_website(&mut self) -> &mut ::std::string::String {
        &mut self.website
    }

    // Take field
    pub fn take_website(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.website, ::std::string::String::new())
    }

    // .DateRange period = 4;


    pub fn get_period(&self) -> &DateRange {
        self.period.as_ref().unwrap_or_else(|| <DateRange as ::protobuf::Message>::default_instance())
    }
    pub fn clear_period(&mut self) {
        self.period.clear();
    }

    pub fn has_period(&self) -> bool {
        self.period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_period(&mut self, v: DateRange) {
        self.period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_period(&mut self) -> &mut DateRange {
        if self.period.is_none() {
            self.period.set_default();
        }
        self.period.as_mut().unwrap()
    }

    // Take field
    pub fn take_period(&mut self) -> DateRange {
        self.period.take().unwrap_or_else(|| DateRange::new())
    }

    // .Location location = 5;


    pub fn get_location(&self) -> &Location {
        self.location.as_ref().unwrap_or_else(|| <Location as ::protobuf::Message>::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> Location {
        self.location.take().unwrap_or_else(|| Location::new())
    }

    // repeated .Duty duty = 6;


    pub fn get_duty(&self) -> &[Duty] {
        &self.duty
    }
    pub fn clear_duty(&mut self) {
        self.duty.clear();
    }

    // Param is passed by value, moved
    pub fn set_duty(&mut self, v: ::protobuf::RepeatedField<Duty>) {
        self.duty = v;
    }

    // Mutable pointer to the field.
    pub fn mut_duty(&mut self) -> &mut ::protobuf::RepeatedField<Duty> {
        &mut self.duty
    }

    // Take field
    pub fn take_duty(&mut self) -> ::protobuf::RepeatedField<Duty> {
        ::std::mem::replace(&mut self.duty, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Experience {
    fn is_initialized(&self) -> bool {
        for v in &self.period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.duty {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.organization)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.website)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.period)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.duty)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.organization.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.organization);
        }
        if !self.website.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.website);
        }
        if let Some(ref v) = self.period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.duty {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.organization.is_empty() {
            os.write_string(2, &self.organization)?;
        }
        if !self.website.is_empty() {
            os.write_string(3, &self.website)?;
        }
        if let Some(ref v) = self.period.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.duty {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Experience {
        Experience::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Experience| { &m.title },
                |m: &mut Experience| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "organization",
                |m: &Experience| { &m.organization },
                |m: &mut Experience| { &mut m.organization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "website",
                |m: &Experience| { &m.website },
                |m: &mut Experience| { &mut m.website },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DateRange>>(
                "period",
                |m: &Experience| { &m.period },
                |m: &mut Experience| { &mut m.period },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Location>>(
                "location",
                |m: &Experience| { &m.location },
                |m: &mut Experience| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Duty>>(
                "duty",
                |m: &Experience| { &m.duty },
                |m: &mut Experience| { &mut m.duty },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Experience>(
                "Experience",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Experience {
        static instance: ::protobuf::rt::LazyV2<Experience> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Experience::new)
    }
}

impl ::protobuf::Clear for Experience {
    fn clear(&mut self) {
        self.title.clear();
        self.organization.clear();
        self.website.clear();
        self.period.clear();
        self.location.clear();
        self.duty.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Experience {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Experience {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Duty {
    // message fields
    pub description: ::std::string::String,
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    pub demo: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Duty {
    fn default() -> &'a Duty {
        <Duty as ::protobuf::Message>::default_instance()
    }
}

impl Duty {
    pub fn new() -> Duty {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated string tags = 2;


    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    // string demo = 3;


    pub fn get_demo(&self) -> &str {
        &self.demo
    }
    pub fn clear_demo(&mut self) {
        self.demo.clear();
    }

    // Param is passed by value, moved
    pub fn set_demo(&mut self, v: ::std::string::String) {
        self.demo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_demo(&mut self) -> &mut ::std::string::String {
        &mut self.demo
    }

    // Take field
    pub fn take_demo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.demo, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Duty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.demo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.demo.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.demo);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        for v in &self.tags {
            os.write_string(2, &v)?;
        };
        if !self.demo.is_empty() {
            os.write_string(3, &self.demo)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Duty {
        Duty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Duty| { &m.description },
                |m: &mut Duty| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tags",
                |m: &Duty| { &m.tags },
                |m: &mut Duty| { &mut m.tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "demo",
                |m: &Duty| { &m.demo },
                |m: &mut Duty| { &mut m.demo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Duty>(
                "Duty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Duty {
        static instance: ::protobuf::rt::LazyV2<Duty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Duty::new)
    }
}

impl ::protobuf::Clear for Duty {
    fn clear(&mut self) {
        self.description.clear();
        self.tags.clear();
        self.demo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Duty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Duty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SkillCategory {
    // message fields
    pub category: ::std::string::String,
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SkillCategory {
    fn default() -> &'a SkillCategory {
        <SkillCategory as ::protobuf::Message>::default_instance()
    }
}

impl SkillCategory {
    pub fn new() -> SkillCategory {
        ::std::default::Default::default()
    }

    // string category = 1;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // repeated string tags = 2;


    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SkillCategory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.category);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.category.is_empty() {
            os.write_string(1, &self.category)?;
        }
        for v in &self.tags {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SkillCategory {
        SkillCategory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &SkillCategory| { &m.category },
                |m: &mut SkillCategory| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tags",
                |m: &SkillCategory| { &m.tags },
                |m: &mut SkillCategory| { &mut m.tags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SkillCategory>(
                "SkillCategory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SkillCategory {
        static instance: ::protobuf::rt::LazyV2<SkillCategory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SkillCategory::new)
    }
}

impl ::protobuf::Clear for SkillCategory {
    fn clear(&mut self) {
        self.category.clear();
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SkillCategory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SkillCategory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cresume.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbe\x03\n\
    \x06Resume\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05em\
    ail\x18\x02\x20\x01(\tR\x05email\x12\x1f\n\x0bsource_code\x18\x03\x20\
    \x01(\tR\nsourceCode\x12\x1b\n\thost_link\x18\x04\x20\x01(\tR\x08hostLin\
    k\x12/\n\x0cphone_number\x18\x05\x20\x01(\x0b2\x0c.PhoneNumberR\x0bphone\
    Number\x12%\n\x08location\x18\x06\x20\x01(\x0b2\t.LocationR\x08location\
    \x12)\n\x10linkedin_profile\x18\x07\x20\x01(\tR\x0flinkedinProfile\x12%\
    \n\x0egithub_profile\x18\x08\x20\x01(\tR\rgithubProfile\x12#\n\x08about_\
    me\x18\t\x20\x03(\x0b2\x08.AboutMeR\x07aboutMe\x12(\n\teducation\x18\n\
    \x20\x03(\x0b2\n.EducationR\teducation\x12+\n\nexperience\x18\x0b\x20\
    \x03(\x0b2\x0b.ExperienceR\nexperience\x12&\n\x06skills\x18\x0c\x20\x03(\
    \x0b2\x0e.SkillCategoryR\x06skills\"+\n\x07AboutMe\x12\x20\n\x0bdescript\
    ion\x18\x01\x20\x01(\tR\x0bdescription\"H\n\x0bPhoneNumber\x12!\n\x0ccou\
    ntry_code\x18\x01\x20\x01(\rR\x0bcountryCode\x12\x16\n\x06number\x18\x02\
    \x20\x01(\x04R\x06number\"N\n\x08Location\x12\x12\n\x04city\x18\x01\x20\
    \x01(\tR\x04city\x12\x14\n\x05state\x18\x02\x20\x01(\tR\x05state\x12\x18\
    \n\x07country\x18\x03\x20\x01(\tR\x07country\"k\n\tDateRange\x120\n\x05s\
    tart\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x05start\x12,\
    \n\x03end\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x03end\"\
    \x9d\x02\n\tEducation\x12\x20\n\x0binstitution\x18\x01\x20\x01(\tR\x0bin\
    stitution\x12\x14\n\x05major\x18\x02\x20\x01(\tR\x05major\x12\x20\n\x0bd\
    escription\x18\x03\x20\x01(\tR\x0bdescription\x12\"\n\x06period\x18\x04\
    \x20\x01(\x0b2\n.DateRangeR\x06period\x12)\n\x06degree\x18\x05\x20\x01(\
    \x0e2\x11.Education.DegreeR\x06degree\x12%\n\x08location\x18\x06\x20\x01\
    (\x0b2\t.LocationR\x08location\"@\n\x06Degree\x12\x10\n\x0cBaccalaureat\
    \x10\0\x12\r\n\tBACHELORS\x10\x01\x12\x0b\n\x07MASTERS\x10\x02\x12\x08\n\
    \x04MOOC\x10\x03\"\xc6\x01\n\nExperience\x12\x14\n\x05title\x18\x01\x20\
    \x01(\tR\x05title\x12\"\n\x0corganization\x18\x02\x20\x01(\tR\x0corganiz\
    ation\x12\x18\n\x07website\x18\x03\x20\x01(\tR\x07website\x12\"\n\x06per\
    iod\x18\x04\x20\x01(\x0b2\n.DateRangeR\x06period\x12%\n\x08location\x18\
    \x05\x20\x01(\x0b2\t.LocationR\x08location\x12\x19\n\x04duty\x18\x06\x20\
    \x03(\x0b2\x05.DutyR\x04duty\"P\n\x04Duty\x12\x20\n\x0bdescription\x18\
    \x01\x20\x01(\tR\x0bdescription\x12\x12\n\x04tags\x18\x02\x20\x03(\tR\
    \x04tags\x12\x12\n\x04demo\x18\x03\x20\x01(\tR\x04demo\"?\n\rSkillCatego\
    ry\x12\x1a\n\x08category\x18\x01\x20\x01(\tR\x08category\x12\x12\n\x04ta\
    gs\x18\x02\x20\x03(\tR\x04tagsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
